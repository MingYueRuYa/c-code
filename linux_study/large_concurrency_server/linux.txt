数据包 一个数据包，两次read
read可能没有把confd所对应的接受缓冲区的数据都读完，那么connfd仍然是活跃的状态
我们应该将读到的数据保存在conndf的应用层缓冲区

POLLOUT事件 触发条件，connfd的发送缓冲区不满（可以容纳数据）
忙等待

poll模型
每次调用poll函数的时候，都需要把监听的套接字与所感兴趣的套接字事件拷贝到内核中

EPOLLIN事件
内核中的socket接收缓冲区 为空  低电平
内核中的socket接收缓冲区 不空  高电平

EPOLLOUT事件
内核中的socket发送缓冲区 为满  低电平
内核中的socket发送缓冲区 不满  高电平

epoll LT
高电平发出

epoll ET
低电平-->高电平 触发
高电平-->低电平 触发

已连接的套接字量不大，并且这些套接字非常活跃

poll，select
一次性遍历返回，活跃的文件描述符

epoll内存实现很复杂，所以在处理大量连接的时候效率更高

fork可能是在主线程中调用，也可能是在子线程中调用
fork得到一个新进程，新进程只有一个执行序列，只有一个线程（调用fork的线程被继承下来）
实际上，对于编写多线程程序来说，我们最好不要在调用fork
不要编写多线程多进程程序，要么用多线程，要么用多进程


面向对象编程风格    
基于对象编程风格    boost bind/function

trivial constructor

有用的
non-trivial constructor

库中类相对比较独立，我们编写应用的时候需要编写一些”胶水代码“来粘合

框架是能够应用于特定应用领域的，不需要编写过多的“胶水代码”来粘合

框架提供用户注册一些回调函数，使得框架能够调用我们所编写的回调函数，这就是使得控制翻转了

C编程风格，注册是哪个全局函数到网络库，网络库通过函数指针来回调
面向对象风格，用一个EchoServer继承TcpServer（抽象类），实现三个接口OnConnection,OnMessage, OnClose
基于对象风格，用一个EchoServer包含一个TcpServer（具体类）对象，在构造函数红boost::bind来注册三个成员函数，OnConnection,OnMessage, OnClose

 
关联：仅仅是使用了class的一些方法
聚合：不仅仅使用了一些方法，同时存在整体与局部的关系
组合：不仅仅时整体与局部的关系，同时还负责对象的声明周期

测试程序除了使用telnet还是可以使用nc

server主动关闭会返回POLLHUB和POLLIN事件

大流量：
    不断生成数据，然后发送（conn->send）
    如果对等方接受不及时，受到通告窗口的控制，内核发送缓冲不足，这个时候，就会将会用户数据添加到应用层缓冲区（output buffer）可能会撑爆output buffer
    解决办法就是，调整发送频率
    关注WriteCompleteCallback
    所有数据都发送完成，WriteComplateCallback回调，然后继续发送

    CHARGEN服务协议可以了解下，muduo simple中有实例代码

